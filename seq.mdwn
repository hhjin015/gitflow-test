# 순서

1. 원격 저장소 fork 및 pull request
2. 원격 저장소와 싱크 및 upstream 생성 및 변경 사항 저장

## 원격 저장소 fork 및 pull request

master branch 
## upstream 
깃 원격 저장소 동기화
```
>>> git remote add upstream OWNER_REPO/REPO_NAME
>>> git fetch upstream
>>> git checkout master
>>> git merget upstream/master
```
# Gitflow
깃 플로우 브랜치 목록

- master
- develop
- feature
- hotfix

### master
- `git tag` 명령어로 태그 까지 붙혀서 릴리즈 할 최종본.
- 마스터 브랜치에 push 되면 자동 배포가 되게 해야함.
- 결국 마스터 브랜치에서 개발하는 일은 없어야 함.
- 검증이 끝난 코드만 마스터에 병합

### develop

- 실질적으로 개발과 테스팅이 이루어지는 곳
- 우리가 지금까지 사용했던 master라고 생각하면 될듯.
- 한 단계 더 가서 feature에서 개발을 수행하고 develop에 병합하면 됨.
### feature

- 실제 기능이 개발될 곳
- 테스팅 혹은 신기능 추가와 관련된 모든 작업을 여기서 실행
- `feature/sign-in` 이런 식으로 branch 만들면 됨.

### hotfix

- 서비스중에 엄청 급한 버그가 생겼을 때 master에서 바로 hotfix 브랜치 따서 작업하고 바로 master에  병합하는 브랜치



## gitflow 관련 명령어

#### 브랜치 생성 후 해당 브랜치로 이동
```
>>> git checkout -b develop
```

#### 브랜치 병합 및 삭제

```
>>> git branch -d develop
```

브랜치 관리하기 편하게 하기 위해서 feature 브랜치에서 개발이 완료되면 무조건 삭제하는걸로
